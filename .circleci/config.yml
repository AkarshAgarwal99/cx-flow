version: 2.1

executors:
  docker:
    docker:
      - image: circleci/golang:1.9

commands: # a reusable command with parameters
  create-github-release:
    description: Create Github Release or Pre-Release
    parameters:
      ghr-option:
        default: ""
        type: string
    steps:
      - run: |
          go get github.com/tcnksm/ghr
          VERSION=$(cat ./build/libs/version.txt)
          rm ./build/libs/version.txt
          mv build/libs/java11/repo-${VERSION}.jar build/libs/cx-flow-${VERSION}-java11.jar
          ghr -t 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 -u AkarshAgarwal99 -n ${VERSION} -r AkarshAgarwal99/cx-flow -c ${CIRCLE_SHA1} << parameters.ghr-option >> -delete ${VERSION} ./build/libs/

jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run: ./gradlew clean build
      - run: ./gradlew -b build-11.gradle --build-cache assemble
      - run: ./gradlew -q getVersion > build/libs/version.txt
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - store_artifacts:
          path: build/libs
      - persist_to_workspace:
          root: .
          paths:
            - build/libs/*
            - Dockerfile
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
  sonar:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          name: Analyze by SonarCloud
          command: ./gradlew clean compileJava compileTestJava sonarqube -x test --info
      - run:
          name: Check Quality Gate
          command: |
            REPORT_PATH="/home/circleci/project/build/sonar/report-task.txt"
            CE_TASK_ID_KEY="ceTaskId="
            SONAR_INSTANCE="https://sonarcloud.io"
            SLEEP_TIME=5
            # get the compute engine task id
            ce_task_id=$(cat $REPORT_PATH | grep $CE_TASK_ID_KEY | cut -d'=' -f2)
            echo "Using task id of ${ce_task_id}"
            if [ -z "$ce_task_id" ]; then
               echo "No task id found"
               exit 1
            fi
            # grab the status of the task
            # if CANCELLED or FAILED, fail the Build
            # if SUCCESS, stop waiting and grab the analysisId
            wait_for_success=true
            while [ "${wait_for_success}" = "true" ]
            do
              ce_status=$(curl -s -u "${SONAR_TOKEN}": "${SONAR_INSTANCE}"/api/ce/task?id=${ce_task_id} | jq -r .task.status)
              echo "Status of SonarQube task is ${ce_status}"
              if [ "${ce_status}" = "CANCELLED" ]; then
                echo "SonarQube Compute job has been cancelled - exiting with error"
                exit 504
              fi
              if [ "${ce_status}" = "FAILED" ]; then
                echo "SonarQube Compute job has failed - exit with error"
                exit 500
              fi
              if [ "${ce_status}" = "SUCCESS" ]; then
                wait_for_success=false
              fi
              sleep "${SLEEP_TIME}"
            done
            ce_analysis_id=$(curl -s -u "${SONAR_TOKEN}": "${SONAR_INSTANCE}"/api/ce/task?id=$ce_task_id | jq -r .task.analysisId)
            echo "Using analysis id of ${ce_analysis_id}"
            # get the status of the quality gate for this analysisId
            qg_status=$(curl -s -u "${SONAR_TOKEN}": "${SONAR_INSTANCE}"/api/qualitygates/project_status?analysisId="${ce_analysis_id}" | jq -r .projectStatus.status)
            echo "Quality Gate status is ${qg_status}"
            if [ "${qg_status}" != "OK" ]; then
              echo "Quality gate is not OK - exiting with error"
              exit 1
            fi

workflows:
  build_and_test:
    jobs:
      - build
      - sonar:
          requires:
            - build
            - sonar